//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34209
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.34209 版自动生成。
// 
#pragma warning disable 1591

namespace CK_Sync.WebFeature {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="FeatureSoap", Namespace="http://www.mapgis.com.cn/")]
    public partial class Feature : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddFeatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFeatureNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelFeatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelFeatureNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFeatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFeatureNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFeatureAttOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFeatureAttNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculateAreaOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculatePerimeterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDotStringFromMapGIS67OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDotStringFromDWGOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLayerAttOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLayerAttNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLayerAttCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLayerAttCountNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsFeatureExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsFeatureExistNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMaxNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback OverLayOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Feature() {
            this.Url = global::CK_Sync.Properties.Settings.Default.CK_Sync_WebFeature_Feature;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddFeatureCompletedEventHandler AddFeatureCompleted;
        
        /// <remarks/>
        public event AddFeatureNewCompletedEventHandler AddFeatureNewCompleted;
        
        /// <remarks/>
        public event DelFeatureCompletedEventHandler DelFeatureCompleted;
        
        /// <remarks/>
        public event DelFeatureNewCompletedEventHandler DelFeatureNewCompleted;
        
        /// <remarks/>
        public event UpdateFeatureCompletedEventHandler UpdateFeatureCompleted;
        
        /// <remarks/>
        public event UpdateFeatureNewCompletedEventHandler UpdateFeatureNewCompleted;
        
        /// <remarks/>
        public event UpdateFeatureAttCompletedEventHandler UpdateFeatureAttCompleted;
        
        /// <remarks/>
        public event UpdateFeatureAttNewCompletedEventHandler UpdateFeatureAttNewCompleted;
        
        /// <remarks/>
        public event CalculateAreaCompletedEventHandler CalculateAreaCompleted;
        
        /// <remarks/>
        public event CalculatePerimeterCompletedEventHandler CalculatePerimeterCompleted;
        
        /// <remarks/>
        public event GetDotStringFromMapGIS67CompletedEventHandler GetDotStringFromMapGIS67Completed;
        
        /// <remarks/>
        public event GetDotStringFromDWGCompletedEventHandler GetDotStringFromDWGCompleted;
        
        /// <remarks/>
        public event GetLayerAttCompletedEventHandler GetLayerAttCompleted;
        
        /// <remarks/>
        public event GetLayerAttNewCompletedEventHandler GetLayerAttNewCompleted;
        
        /// <remarks/>
        public event GetLayerAttCountCompletedEventHandler GetLayerAttCountCompleted;
        
        /// <remarks/>
        public event GetLayerAttCountNewCompletedEventHandler GetLayerAttCountNewCompleted;
        
        /// <remarks/>
        public event IsFeatureExistCompletedEventHandler IsFeatureExistCompleted;
        
        /// <remarks/>
        public event IsFeatureExistNewCompletedEventHandler IsFeatureExistNewCompleted;
        
        /// <remarks/>
        public event GetMaxNoCompletedEventHandler GetMaxNoCompleted;
        
        /// <remarks/>
        public event OverLayCompletedEventHandler OverLayCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/AddFeature", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddFeature(string strRegionCode, string strSubjectType, string strDataYear, string strScale, string strLayerName, string strDotString, string[] attField, string[] attValue) {
            object[] results = this.Invoke("AddFeature", new object[] {
                        strRegionCode,
                        strSubjectType,
                        strDataYear,
                        strScale,
                        strLayerName,
                        strDotString,
                        attField,
                        attValue});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddFeatureAsync(string strRegionCode, string strSubjectType, string strDataYear, string strScale, string strLayerName, string strDotString, string[] attField, string[] attValue) {
            this.AddFeatureAsync(strRegionCode, strSubjectType, strDataYear, strScale, strLayerName, strDotString, attField, attValue, null);
        }
        
        /// <remarks/>
        public void AddFeatureAsync(string strRegionCode, string strSubjectType, string strDataYear, string strScale, string strLayerName, string strDotString, string[] attField, string[] attValue, object userState) {
            if ((this.AddFeatureOperationCompleted == null)) {
                this.AddFeatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFeatureOperationCompleted);
            }
            this.InvokeAsync("AddFeature", new object[] {
                        strRegionCode,
                        strSubjectType,
                        strDataYear,
                        strScale,
                        strLayerName,
                        strDotString,
                        attField,
                        attValue}, this.AddFeatureOperationCompleted, userState);
        }
        
        private void OnAddFeatureOperationCompleted(object arg) {
            if ((this.AddFeatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFeatureCompleted(this, new AddFeatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/AddFeatureNew", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddFeatureNew(string strSolutionName, string strInputAtt, string strDotString, string[] attField, string[] attValue) {
            object[] results = this.Invoke("AddFeatureNew", new object[] {
                        strSolutionName,
                        strInputAtt,
                        strDotString,
                        attField,
                        attValue});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddFeatureNewAsync(string strSolutionName, string strInputAtt, string strDotString, string[] attField, string[] attValue) {
            this.AddFeatureNewAsync(strSolutionName, strInputAtt, strDotString, attField, attValue, null);
        }
        
        /// <remarks/>
        public void AddFeatureNewAsync(string strSolutionName, string strInputAtt, string strDotString, string[] attField, string[] attValue, object userState) {
            if ((this.AddFeatureNewOperationCompleted == null)) {
                this.AddFeatureNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFeatureNewOperationCompleted);
            }
            this.InvokeAsync("AddFeatureNew", new object[] {
                        strSolutionName,
                        strInputAtt,
                        strDotString,
                        attField,
                        attValue}, this.AddFeatureNewOperationCompleted, userState);
        }
        
        private void OnAddFeatureNewOperationCompleted(object arg) {
            if ((this.AddFeatureNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFeatureNewCompleted(this, new AddFeatureNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/DelFeature", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DelFeature(string strRegionCode, string strSubjectType, string strDataYear, string strScale, string strLayerName, long lFeatureID, string strWhere) {
            object[] results = this.Invoke("DelFeature", new object[] {
                        strRegionCode,
                        strSubjectType,
                        strDataYear,
                        strScale,
                        strLayerName,
                        lFeatureID,
                        strWhere});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DelFeatureAsync(string strRegionCode, string strSubjectType, string strDataYear, string strScale, string strLayerName, long lFeatureID, string strWhere) {
            this.DelFeatureAsync(strRegionCode, strSubjectType, strDataYear, strScale, strLayerName, lFeatureID, strWhere, null);
        }
        
        /// <remarks/>
        public void DelFeatureAsync(string strRegionCode, string strSubjectType, string strDataYear, string strScale, string strLayerName, long lFeatureID, string strWhere, object userState) {
            if ((this.DelFeatureOperationCompleted == null)) {
                this.DelFeatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelFeatureOperationCompleted);
            }
            this.InvokeAsync("DelFeature", new object[] {
                        strRegionCode,
                        strSubjectType,
                        strDataYear,
                        strScale,
                        strLayerName,
                        lFeatureID,
                        strWhere}, this.DelFeatureOperationCompleted, userState);
        }
        
        private void OnDelFeatureOperationCompleted(object arg) {
            if ((this.DelFeatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelFeatureCompleted(this, new DelFeatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/DelFeatureNew", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DelFeatureNew(string strSolutionName, string strInputAtt, long lFeatureID, string strWhere) {
            object[] results = this.Invoke("DelFeatureNew", new object[] {
                        strSolutionName,
                        strInputAtt,
                        lFeatureID,
                        strWhere});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DelFeatureNewAsync(string strSolutionName, string strInputAtt, long lFeatureID, string strWhere) {
            this.DelFeatureNewAsync(strSolutionName, strInputAtt, lFeatureID, strWhere, null);
        }
        
        /// <remarks/>
        public void DelFeatureNewAsync(string strSolutionName, string strInputAtt, long lFeatureID, string strWhere, object userState) {
            if ((this.DelFeatureNewOperationCompleted == null)) {
                this.DelFeatureNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelFeatureNewOperationCompleted);
            }
            this.InvokeAsync("DelFeatureNew", new object[] {
                        strSolutionName,
                        strInputAtt,
                        lFeatureID,
                        strWhere}, this.DelFeatureNewOperationCompleted, userState);
        }
        
        private void OnDelFeatureNewOperationCompleted(object arg) {
            if ((this.DelFeatureNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelFeatureNewCompleted(this, new DelFeatureNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/UpdateFeature", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateFeature(string strRegionCode, string strSubjectType, string strDataYear, string strScale, string strLayerName, string strDotString, string[] fields, string[] att, long lFeatureID, string strWhere) {
            object[] results = this.Invoke("UpdateFeature", new object[] {
                        strRegionCode,
                        strSubjectType,
                        strDataYear,
                        strScale,
                        strLayerName,
                        strDotString,
                        fields,
                        att,
                        lFeatureID,
                        strWhere});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateFeatureAsync(string strRegionCode, string strSubjectType, string strDataYear, string strScale, string strLayerName, string strDotString, string[] fields, string[] att, long lFeatureID, string strWhere) {
            this.UpdateFeatureAsync(strRegionCode, strSubjectType, strDataYear, strScale, strLayerName, strDotString, fields, att, lFeatureID, strWhere, null);
        }
        
        /// <remarks/>
        public void UpdateFeatureAsync(string strRegionCode, string strSubjectType, string strDataYear, string strScale, string strLayerName, string strDotString, string[] fields, string[] att, long lFeatureID, string strWhere, object userState) {
            if ((this.UpdateFeatureOperationCompleted == null)) {
                this.UpdateFeatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFeatureOperationCompleted);
            }
            this.InvokeAsync("UpdateFeature", new object[] {
                        strRegionCode,
                        strSubjectType,
                        strDataYear,
                        strScale,
                        strLayerName,
                        strDotString,
                        fields,
                        att,
                        lFeatureID,
                        strWhere}, this.UpdateFeatureOperationCompleted, userState);
        }
        
        private void OnUpdateFeatureOperationCompleted(object arg) {
            if ((this.UpdateFeatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFeatureCompleted(this, new UpdateFeatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/UpdateFeatureNew", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateFeatureNew(string strSolutionName, string strInputAtt, string strDotString, string[] fields, string[] att, long lFeatureID, string strWhere) {
            object[] results = this.Invoke("UpdateFeatureNew", new object[] {
                        strSolutionName,
                        strInputAtt,
                        strDotString,
                        fields,
                        att,
                        lFeatureID,
                        strWhere});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateFeatureNewAsync(string strSolutionName, string strInputAtt, string strDotString, string[] fields, string[] att, long lFeatureID, string strWhere) {
            this.UpdateFeatureNewAsync(strSolutionName, strInputAtt, strDotString, fields, att, lFeatureID, strWhere, null);
        }
        
        /// <remarks/>
        public void UpdateFeatureNewAsync(string strSolutionName, string strInputAtt, string strDotString, string[] fields, string[] att, long lFeatureID, string strWhere, object userState) {
            if ((this.UpdateFeatureNewOperationCompleted == null)) {
                this.UpdateFeatureNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFeatureNewOperationCompleted);
            }
            this.InvokeAsync("UpdateFeatureNew", new object[] {
                        strSolutionName,
                        strInputAtt,
                        strDotString,
                        fields,
                        att,
                        lFeatureID,
                        strWhere}, this.UpdateFeatureNewOperationCompleted, userState);
        }
        
        private void OnUpdateFeatureNewOperationCompleted(object arg) {
            if ((this.UpdateFeatureNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFeatureNewCompleted(this, new UpdateFeatureNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/UpdateFeatureAtt", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateFeatureAtt(string strRegionCode, string strSubjectType, string strDataYear, string strScale, string strLayerName, string strDotString, string[] fields, string[] att, string filterColumnsName) {
            object[] results = this.Invoke("UpdateFeatureAtt", new object[] {
                        strRegionCode,
                        strSubjectType,
                        strDataYear,
                        strScale,
                        strLayerName,
                        strDotString,
                        fields,
                        att,
                        filterColumnsName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateFeatureAttAsync(string strRegionCode, string strSubjectType, string strDataYear, string strScale, string strLayerName, string strDotString, string[] fields, string[] att, string filterColumnsName) {
            this.UpdateFeatureAttAsync(strRegionCode, strSubjectType, strDataYear, strScale, strLayerName, strDotString, fields, att, filterColumnsName, null);
        }
        
        /// <remarks/>
        public void UpdateFeatureAttAsync(string strRegionCode, string strSubjectType, string strDataYear, string strScale, string strLayerName, string strDotString, string[] fields, string[] att, string filterColumnsName, object userState) {
            if ((this.UpdateFeatureAttOperationCompleted == null)) {
                this.UpdateFeatureAttOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFeatureAttOperationCompleted);
            }
            this.InvokeAsync("UpdateFeatureAtt", new object[] {
                        strRegionCode,
                        strSubjectType,
                        strDataYear,
                        strScale,
                        strLayerName,
                        strDotString,
                        fields,
                        att,
                        filterColumnsName}, this.UpdateFeatureAttOperationCompleted, userState);
        }
        
        private void OnUpdateFeatureAttOperationCompleted(object arg) {
            if ((this.UpdateFeatureAttCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFeatureAttCompleted(this, new UpdateFeatureAttCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/UpdateFeatureAttNew", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateFeatureAttNew(string strSolutionName, string strInputAtt, string strDotString, string[] fields, string[] att, string filterColumnsName) {
            object[] results = this.Invoke("UpdateFeatureAttNew", new object[] {
                        strSolutionName,
                        strInputAtt,
                        strDotString,
                        fields,
                        att,
                        filterColumnsName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateFeatureAttNewAsync(string strSolutionName, string strInputAtt, string strDotString, string[] fields, string[] att, string filterColumnsName) {
            this.UpdateFeatureAttNewAsync(strSolutionName, strInputAtt, strDotString, fields, att, filterColumnsName, null);
        }
        
        /// <remarks/>
        public void UpdateFeatureAttNewAsync(string strSolutionName, string strInputAtt, string strDotString, string[] fields, string[] att, string filterColumnsName, object userState) {
            if ((this.UpdateFeatureAttNewOperationCompleted == null)) {
                this.UpdateFeatureAttNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFeatureAttNewOperationCompleted);
            }
            this.InvokeAsync("UpdateFeatureAttNew", new object[] {
                        strSolutionName,
                        strInputAtt,
                        strDotString,
                        fields,
                        att,
                        filterColumnsName}, this.UpdateFeatureAttNewOperationCompleted, userState);
        }
        
        private void OnUpdateFeatureAttNewOperationCompleted(object arg) {
            if ((this.UpdateFeatureAttNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFeatureAttNewCompleted(this, new UpdateFeatureAttNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/CalculateArea", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double CalculateArea(string strDotString) {
            object[] results = this.Invoke("CalculateArea", new object[] {
                        strDotString});
            return ((double)(results[0]));
        }
        
        /// <remarks/>
        public void CalculateAreaAsync(string strDotString) {
            this.CalculateAreaAsync(strDotString, null);
        }
        
        /// <remarks/>
        public void CalculateAreaAsync(string strDotString, object userState) {
            if ((this.CalculateAreaOperationCompleted == null)) {
                this.CalculateAreaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateAreaOperationCompleted);
            }
            this.InvokeAsync("CalculateArea", new object[] {
                        strDotString}, this.CalculateAreaOperationCompleted, userState);
        }
        
        private void OnCalculateAreaOperationCompleted(object arg) {
            if ((this.CalculateAreaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateAreaCompleted(this, new CalculateAreaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/CalculatePerimeter", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double CalculatePerimeter(string strDotString) {
            object[] results = this.Invoke("CalculatePerimeter", new object[] {
                        strDotString});
            return ((double)(results[0]));
        }
        
        /// <remarks/>
        public void CalculatePerimeterAsync(string strDotString) {
            this.CalculatePerimeterAsync(strDotString, null);
        }
        
        /// <remarks/>
        public void CalculatePerimeterAsync(string strDotString, object userState) {
            if ((this.CalculatePerimeterOperationCompleted == null)) {
                this.CalculatePerimeterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculatePerimeterOperationCompleted);
            }
            this.InvokeAsync("CalculatePerimeter", new object[] {
                        strDotString}, this.CalculatePerimeterOperationCompleted, userState);
        }
        
        private void OnCalculatePerimeterOperationCompleted(object arg) {
            if ((this.CalculatePerimeterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculatePerimeterCompleted(this, new CalculatePerimeterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetDotStringFromMapGIS67", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDotStringFromMapGIS67([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] listFileStream, string strFileType) {
            object[] results = this.Invoke("GetDotStringFromMapGIS67", new object[] {
                        listFileStream,
                        strFileType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDotStringFromMapGIS67Async(byte[] listFileStream, string strFileType) {
            this.GetDotStringFromMapGIS67Async(listFileStream, strFileType, null);
        }
        
        /// <remarks/>
        public void GetDotStringFromMapGIS67Async(byte[] listFileStream, string strFileType, object userState) {
            if ((this.GetDotStringFromMapGIS67OperationCompleted == null)) {
                this.GetDotStringFromMapGIS67OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDotStringFromMapGIS67OperationCompleted);
            }
            this.InvokeAsync("GetDotStringFromMapGIS67", new object[] {
                        listFileStream,
                        strFileType}, this.GetDotStringFromMapGIS67OperationCompleted, userState);
        }
        
        private void OnGetDotStringFromMapGIS67OperationCompleted(object arg) {
            if ((this.GetDotStringFromMapGIS67Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDotStringFromMapGIS67Completed(this, new GetDotStringFromMapGIS67CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetDotStringFromDWG", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDotStringFromDWG([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] listFileStream, string strLayer) {
            object[] results = this.Invoke("GetDotStringFromDWG", new object[] {
                        listFileStream,
                        strLayer});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDotStringFromDWGAsync(byte[] listFileStream, string strLayer) {
            this.GetDotStringFromDWGAsync(listFileStream, strLayer, null);
        }
        
        /// <remarks/>
        public void GetDotStringFromDWGAsync(byte[] listFileStream, string strLayer, object userState) {
            if ((this.GetDotStringFromDWGOperationCompleted == null)) {
                this.GetDotStringFromDWGOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDotStringFromDWGOperationCompleted);
            }
            this.InvokeAsync("GetDotStringFromDWG", new object[] {
                        listFileStream,
                        strLayer}, this.GetDotStringFromDWGOperationCompleted, userState);
        }
        
        private void OnGetDotStringFromDWGOperationCompleted(object arg) {
            if ((this.GetDotStringFromDWGCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDotStringFromDWGCompleted(this, new GetDotStringFromDWGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetLayerAtt", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetLayerAtt(string strRegionCode, string strSubjectType, string strDataYear, string strScale, string strLayerName, string strKeyWord, string strColumnList, int nPageSize, int nPageIndex, string strWhere, string strOrder) {
            object[] results = this.Invoke("GetLayerAtt", new object[] {
                        strRegionCode,
                        strSubjectType,
                        strDataYear,
                        strScale,
                        strLayerName,
                        strKeyWord,
                        strColumnList,
                        nPageSize,
                        nPageIndex,
                        strWhere,
                        strOrder});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetLayerAttAsync(string strRegionCode, string strSubjectType, string strDataYear, string strScale, string strLayerName, string strKeyWord, string strColumnList, int nPageSize, int nPageIndex, string strWhere, string strOrder) {
            this.GetLayerAttAsync(strRegionCode, strSubjectType, strDataYear, strScale, strLayerName, strKeyWord, strColumnList, nPageSize, nPageIndex, strWhere, strOrder, null);
        }
        
        /// <remarks/>
        public void GetLayerAttAsync(string strRegionCode, string strSubjectType, string strDataYear, string strScale, string strLayerName, string strKeyWord, string strColumnList, int nPageSize, int nPageIndex, string strWhere, string strOrder, object userState) {
            if ((this.GetLayerAttOperationCompleted == null)) {
                this.GetLayerAttOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLayerAttOperationCompleted);
            }
            this.InvokeAsync("GetLayerAtt", new object[] {
                        strRegionCode,
                        strSubjectType,
                        strDataYear,
                        strScale,
                        strLayerName,
                        strKeyWord,
                        strColumnList,
                        nPageSize,
                        nPageIndex,
                        strWhere,
                        strOrder}, this.GetLayerAttOperationCompleted, userState);
        }
        
        private void OnGetLayerAttOperationCompleted(object arg) {
            if ((this.GetLayerAttCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLayerAttCompleted(this, new GetLayerAttCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetLayerAttNew", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetLayerAttNew(string strSolutionName, string strInputAtt, string strKeyWord, string strColumnList, int nPageSize, int nPageIndex, string strWhere, string strOrder) {
            object[] results = this.Invoke("GetLayerAttNew", new object[] {
                        strSolutionName,
                        strInputAtt,
                        strKeyWord,
                        strColumnList,
                        nPageSize,
                        nPageIndex,
                        strWhere,
                        strOrder});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetLayerAttNewAsync(string strSolutionName, string strInputAtt, string strKeyWord, string strColumnList, int nPageSize, int nPageIndex, string strWhere, string strOrder) {
            this.GetLayerAttNewAsync(strSolutionName, strInputAtt, strKeyWord, strColumnList, nPageSize, nPageIndex, strWhere, strOrder, null);
        }
        
        /// <remarks/>
        public void GetLayerAttNewAsync(string strSolutionName, string strInputAtt, string strKeyWord, string strColumnList, int nPageSize, int nPageIndex, string strWhere, string strOrder, object userState) {
            if ((this.GetLayerAttNewOperationCompleted == null)) {
                this.GetLayerAttNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLayerAttNewOperationCompleted);
            }
            this.InvokeAsync("GetLayerAttNew", new object[] {
                        strSolutionName,
                        strInputAtt,
                        strKeyWord,
                        strColumnList,
                        nPageSize,
                        nPageIndex,
                        strWhere,
                        strOrder}, this.GetLayerAttNewOperationCompleted, userState);
        }
        
        private void OnGetLayerAttNewOperationCompleted(object arg) {
            if ((this.GetLayerAttNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLayerAttNewCompleted(this, new GetLayerAttNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetLayerAttCount", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetLayerAttCount(string strRegionCode, string strSubjectType, string strDataYear, string strScale, string strLayerName, string strWhere) {
            object[] results = this.Invoke("GetLayerAttCount", new object[] {
                        strRegionCode,
                        strSubjectType,
                        strDataYear,
                        strScale,
                        strLayerName,
                        strWhere});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetLayerAttCountAsync(string strRegionCode, string strSubjectType, string strDataYear, string strScale, string strLayerName, string strWhere) {
            this.GetLayerAttCountAsync(strRegionCode, strSubjectType, strDataYear, strScale, strLayerName, strWhere, null);
        }
        
        /// <remarks/>
        public void GetLayerAttCountAsync(string strRegionCode, string strSubjectType, string strDataYear, string strScale, string strLayerName, string strWhere, object userState) {
            if ((this.GetLayerAttCountOperationCompleted == null)) {
                this.GetLayerAttCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLayerAttCountOperationCompleted);
            }
            this.InvokeAsync("GetLayerAttCount", new object[] {
                        strRegionCode,
                        strSubjectType,
                        strDataYear,
                        strScale,
                        strLayerName,
                        strWhere}, this.GetLayerAttCountOperationCompleted, userState);
        }
        
        private void OnGetLayerAttCountOperationCompleted(object arg) {
            if ((this.GetLayerAttCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLayerAttCountCompleted(this, new GetLayerAttCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetLayerAttCountNew", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetLayerAttCountNew(string strSolutionName, string strInputAtt, string strWhere) {
            object[] results = this.Invoke("GetLayerAttCountNew", new object[] {
                        strSolutionName,
                        strInputAtt,
                        strWhere});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetLayerAttCountNewAsync(string strSolutionName, string strInputAtt, string strWhere) {
            this.GetLayerAttCountNewAsync(strSolutionName, strInputAtt, strWhere, null);
        }
        
        /// <remarks/>
        public void GetLayerAttCountNewAsync(string strSolutionName, string strInputAtt, string strWhere, object userState) {
            if ((this.GetLayerAttCountNewOperationCompleted == null)) {
                this.GetLayerAttCountNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLayerAttCountNewOperationCompleted);
            }
            this.InvokeAsync("GetLayerAttCountNew", new object[] {
                        strSolutionName,
                        strInputAtt,
                        strWhere}, this.GetLayerAttCountNewOperationCompleted, userState);
        }
        
        private void OnGetLayerAttCountNewOperationCompleted(object arg) {
            if ((this.GetLayerAttCountNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLayerAttCountNewCompleted(this, new GetLayerAttCountNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/IsFeatureExist", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsFeatureExist(string strRegionCode, string strSubjectType, string strDataYear, string strScale, string strLayerName, string strWhere) {
            object[] results = this.Invoke("IsFeatureExist", new object[] {
                        strRegionCode,
                        strSubjectType,
                        strDataYear,
                        strScale,
                        strLayerName,
                        strWhere});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsFeatureExistAsync(string strRegionCode, string strSubjectType, string strDataYear, string strScale, string strLayerName, string strWhere) {
            this.IsFeatureExistAsync(strRegionCode, strSubjectType, strDataYear, strScale, strLayerName, strWhere, null);
        }
        
        /// <remarks/>
        public void IsFeatureExistAsync(string strRegionCode, string strSubjectType, string strDataYear, string strScale, string strLayerName, string strWhere, object userState) {
            if ((this.IsFeatureExistOperationCompleted == null)) {
                this.IsFeatureExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsFeatureExistOperationCompleted);
            }
            this.InvokeAsync("IsFeatureExist", new object[] {
                        strRegionCode,
                        strSubjectType,
                        strDataYear,
                        strScale,
                        strLayerName,
                        strWhere}, this.IsFeatureExistOperationCompleted, userState);
        }
        
        private void OnIsFeatureExistOperationCompleted(object arg) {
            if ((this.IsFeatureExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsFeatureExistCompleted(this, new IsFeatureExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/IsFeatureExistNew", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsFeatureExistNew(string strSolutionName, string strInputAtt, string strWhere) {
            object[] results = this.Invoke("IsFeatureExistNew", new object[] {
                        strSolutionName,
                        strInputAtt,
                        strWhere});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsFeatureExistNewAsync(string strSolutionName, string strInputAtt, string strWhere) {
            this.IsFeatureExistNewAsync(strSolutionName, strInputAtt, strWhere, null);
        }
        
        /// <remarks/>
        public void IsFeatureExistNewAsync(string strSolutionName, string strInputAtt, string strWhere, object userState) {
            if ((this.IsFeatureExistNewOperationCompleted == null)) {
                this.IsFeatureExistNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsFeatureExistNewOperationCompleted);
            }
            this.InvokeAsync("IsFeatureExistNew", new object[] {
                        strSolutionName,
                        strInputAtt,
                        strWhere}, this.IsFeatureExistNewOperationCompleted, userState);
        }
        
        private void OnIsFeatureExistNewOperationCompleted(object arg) {
            if ((this.IsFeatureExistNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsFeatureExistNewCompleted(this, new IsFeatureExistNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetMaxNo", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMaxNo(string strSolutionName, string strInputAtt, string strFieldName) {
            object[] results = this.Invoke("GetMaxNo", new object[] {
                        strSolutionName,
                        strInputAtt,
                        strFieldName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMaxNoAsync(string strSolutionName, string strInputAtt, string strFieldName) {
            this.GetMaxNoAsync(strSolutionName, strInputAtt, strFieldName, null);
        }
        
        /// <remarks/>
        public void GetMaxNoAsync(string strSolutionName, string strInputAtt, string strFieldName, object userState) {
            if ((this.GetMaxNoOperationCompleted == null)) {
                this.GetMaxNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMaxNoOperationCompleted);
            }
            this.InvokeAsync("GetMaxNo", new object[] {
                        strSolutionName,
                        strInputAtt,
                        strFieldName}, this.GetMaxNoOperationCompleted, userState);
        }
        
        private void OnGetMaxNoOperationCompleted(object arg) {
            if ((this.GetMaxNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMaxNoCompleted(this, new GetMaxNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/OverLay", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OverLay(string strSolutionName1, string strInputAtt1, string strSolutionName2, string strInputAtt2) {
            object[] results = this.Invoke("OverLay", new object[] {
                        strSolutionName1,
                        strInputAtt1,
                        strSolutionName2,
                        strInputAtt2});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OverLayAsync(string strSolutionName1, string strInputAtt1, string strSolutionName2, string strInputAtt2) {
            this.OverLayAsync(strSolutionName1, strInputAtt1, strSolutionName2, strInputAtt2, null);
        }
        
        /// <remarks/>
        public void OverLayAsync(string strSolutionName1, string strInputAtt1, string strSolutionName2, string strInputAtt2, object userState) {
            if ((this.OverLayOperationCompleted == null)) {
                this.OverLayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOverLayOperationCompleted);
            }
            this.InvokeAsync("OverLay", new object[] {
                        strSolutionName1,
                        strInputAtt1,
                        strSolutionName2,
                        strInputAtt2}, this.OverLayOperationCompleted, userState);
        }
        
        private void OnOverLayOperationCompleted(object arg) {
            if ((this.OverLayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OverLayCompleted(this, new OverLayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AddFeatureCompletedEventHandler(object sender, AddFeatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFeatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFeatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AddFeatureNewCompletedEventHandler(object sender, AddFeatureNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFeatureNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFeatureNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DelFeatureCompletedEventHandler(object sender, DelFeatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DelFeatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DelFeatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DelFeatureNewCompletedEventHandler(object sender, DelFeatureNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DelFeatureNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DelFeatureNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void UpdateFeatureCompletedEventHandler(object sender, UpdateFeatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateFeatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateFeatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void UpdateFeatureNewCompletedEventHandler(object sender, UpdateFeatureNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateFeatureNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateFeatureNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void UpdateFeatureAttCompletedEventHandler(object sender, UpdateFeatureAttCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateFeatureAttCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateFeatureAttCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void UpdateFeatureAttNewCompletedEventHandler(object sender, UpdateFeatureAttNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateFeatureAttNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateFeatureAttNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CalculateAreaCompletedEventHandler(object sender, CalculateAreaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculateAreaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateAreaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CalculatePerimeterCompletedEventHandler(object sender, CalculatePerimeterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculatePerimeterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculatePerimeterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetDotStringFromMapGIS67CompletedEventHandler(object sender, GetDotStringFromMapGIS67CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDotStringFromMapGIS67CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDotStringFromMapGIS67CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetDotStringFromDWGCompletedEventHandler(object sender, GetDotStringFromDWGCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDotStringFromDWGCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDotStringFromDWGCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetLayerAttCompletedEventHandler(object sender, GetLayerAttCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLayerAttCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLayerAttCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetLayerAttNewCompletedEventHandler(object sender, GetLayerAttNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLayerAttNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLayerAttNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetLayerAttCountCompletedEventHandler(object sender, GetLayerAttCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLayerAttCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLayerAttCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetLayerAttCountNewCompletedEventHandler(object sender, GetLayerAttCountNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLayerAttCountNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLayerAttCountNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void IsFeatureExistCompletedEventHandler(object sender, IsFeatureExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsFeatureExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsFeatureExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void IsFeatureExistNewCompletedEventHandler(object sender, IsFeatureExistNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsFeatureExistNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsFeatureExistNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetMaxNoCompletedEventHandler(object sender, GetMaxNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMaxNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMaxNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void OverLayCompletedEventHandler(object sender, OverLayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OverLayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OverLayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591